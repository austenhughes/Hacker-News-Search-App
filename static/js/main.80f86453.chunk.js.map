{"version":3,"sources":["components/Nav/index.js","components/SearchBox/index.js","pages/Search/index.js","components/Record/index.js","pages/History/index.js","App.js","index.js"],"names":["Nav","className","href","SearchBox","props","forCall","useState","newSearch","setNewSearch","rerunSearch","Promise","resolve","localStorage","getItem","a","result","setItem","handleFormSubmitNewSearch","event","parent","firstChild","removeChild","removeAllChildNodes","document","querySelector","value","checkIfRerun","newHistory","fetch","then","response","json","data","results","info","hits","forEach","element","listItem","title","listURL","url","listing","createElement","setAttribute","listingURL","linkText","createTextNode","appendChild","listText","listTextURL","getElementById","append","asyncCall","onChange","target","name","type","placeholder","id","onClick","Search","Record","showHistory","split","index","length","historyListing","onclick","this","innerHTML","historyListingSpace","History","App","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.80f86453.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Nav() {\n        // sets navbar for use on all pages\nreturn (\n<div className=\"nav\">\n    <div className= \"btnBlock\">\n    <a className=\"navBtn\" href=\"/hacker-news-search-app/#/search\">Search</a>\n    <a className=\"navBtn\" href=\"/hacker-news-search-app/#/history\">History</a>\n    </div>\n</div>\n);\n}\n\nexport default Nav; ","import React, { useState} from \"react\";\n\nfunction SearchBox(props) {\n    let forCall = \"\";\n    const [newSearch, setNewSearch] = useState({})\n        // checks if this is a search being run again or if it is fresh search\n    asyncCall();\n    function rerunSearch(){\n        return new Promise(resolve => {\n        // checks local storage for search again element\n            let rerun = localStorage.getItem(\"searchAgain\")\n            resolve(rerun)\n        })\n    };\n    async function asyncCall(){\n        // if local storage is holding a search to be searched again the program will run that search\n        // if not the page will stay clear \n        const result = await rerunSearch();\n        if (result !== \"\"){\n            localStorage.setItem(\"searchAgain\", \"\")\n            forCall = result\n            handleFormSubmitNewSearch();\n        }\n    };\n    function handleInputChange(event) {\n        const { value } = event.target;\n        setNewSearch({...newSearch, value})\n        };\n        // generates search results and writes to page \n    function handleFormSubmitNewSearch(event) {\n        // clears results from last search   \n        clearLast ();\n        function clearLast() {\n        function removeAllChildNodes(parent) {\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n        const container = document.querySelector('#list');\n        removeAllChildNodes(container);\n        };\n        // set search value for search\n        checkIfRerun();\n        function checkIfRerun(){\n            if(forCall !== \"\"){\n            // will run search parameter form local storage for a rerun of a past search\n            let runAgain = forCall\n            forCall = runAgain;\n            } else {\n            //  will run search parameter for a new search \n            forCall = newSearch.value;  \n            }\n        }\n            // records search parameter history in local storage to be used later\n        let historyStored = localStorage.getItem(\"history\");\n        let newHistory = historyStored + \" ,\" + forCall\n        localStorage.setItem(\"history\", newHistory);\n            // API call to get search results\n        fetch(\n            \"http://hn.algolia.com/api/v1/search?query=\"+forCall+\"&tags=story\"\n        )\n        .then(function (response) {\n            return response.json();\n        })\n        .then(function (data) {\n            let results = data;\n            let info = results.hits;\n            results = info\n            info.forEach(element => {\n                let listItem = element.title;\n                let listURL = element.url\n            // create divs with names of top 20 relevant articles\n                let listing = document.createElement(\"div\");\n                listing.setAttribute(\"id\", \"history\");\n            //  creates hyperlinks of top 20 relevant articles\n                let listingURL = document.createElement(\"a\");\n                var linkText = document.createTextNode(listURL);\n                listingURL.appendChild(linkText);\n                listingURL.href = listURL;\n            // sets what will written be on the above divs and hyperlinks\n                let listText = document.createTextNode(listItem)\n                let listTextURL = document.createTextNode(listURL)\n                listing.appendChild(listText);\n                listingURL.appendChild(listTextURL);\n            // write divs and hyperlinks to page\n                document.getElementById(\"list\").append(listing)\n                document.getElementById(\"list\").append(listingURL)\n            });\n        });\n          };\n\n           // sets search and display structure\n    return (\n        \n        <div className=\"searchbar\">\n        \n        <div className=\"bar\">\n        <div className=\"shift\">\n        <input\n          onChange={handleInputChange}\n          value={props.value}\n          name=\"search\"\n          type=\"text\"\n          className=\"\"\n          placeholder=\"search\"\n          id=\"search\"\n        />\n        \n        <button \n            onClick={handleFormSubmitNewSearch} \n            className=\"btn2\" type=\"button\" value=\"Search\">Search\n        </button>\n\n        </div>\n        </div>\n\n        <ul>\n        <div className=\"list\" id=\"list\"></div>\n        </ul>\n\n        </div>\n);\n\n}\n\nexport default SearchBox; ","import React from \"react\";\nimport Nav from \"../../components/Nav/index\";\nimport SearchBox from \"../../components/SearchBox/index\";\n\nfunction Search() {\n    // sets search page\n  return <div>\n      <Nav />\n      <SearchBox />\n      </div>\n\n}\n\nexport default Search;","import React from \"react\";\n\nfunction Record() {\n\n            // function to clear search history from both the local storage and the page with the ush of a button \n    function handleFormSubmitClearHistory(){\n            // removes from local storage\n        let historyCleared = '';\n        localStorage.setItem(\"history\", historyCleared)\n            // removes from page\n        clearLast ();\n        function clearLast() {\n        function removeAllChildNodes(parent) {\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n        const container = document.querySelector('#historyList');\n        removeAllChildNodes(container);\n        }\n    }\n\n            // async function to pull history from local storage and write it page when done \n    function showHistory() {\n            // retrieves the search history string and breaks it into a usable array on the comma\n        return new Promise(resolve => {\n            let historyArray = \"\"\n            let historyStored = localStorage.getItem(\"history\");\n            historyArray = historyStored.split(',');\n            resolve(historyArray);\n        });\n      }\n            //   picks up the search history information and displays it on the page one at a time \n      async function asyncCall() {\n        const result = await showHistory();\n        for (let index = 1; index < result.length; index++) {\n            const element = result[index];\n            // builds element to be added to page\n            let historyListing = document.createElement(\"a\");\n            // sets up element details\n            var linkText = document.createTextNode(element);\n                historyListing.appendChild(linkText);\n                historyListing.href = (\"/hacker-news-search-app/#/search\");\n                historyListing.onclick = function(){\n                localStorage.setItem(\"searchAgain\", this.innerHTML)\n                  };\n            // adds to page with a line break between hyperlinks\n                document.getElementById(\"historyList\").append(historyListing)\n            let historyListingSpace = document.createElement(\"br\");\n                document.getElementById(\"historyList\").append(historyListingSpace)\n\n        }\n      }\n      \n      asyncCall();\n\n            // sets history display structure\nreturn (\n    <div>\n    <div className=\"record\">\n        <ul>\n        <div className=\"historyList\" id=\"historyList\"></div>\n        </ul>\n    </div>\n\n        <button \n            onClick={handleFormSubmitClearHistory} \n            className=\"btn\" type=\"button\" value=\"clear\">Clear History\n        </button>\n\n    </div>\n\n);\n}\n\nexport default Record; ","import React from \"react\";\nimport Nav from \"../../components/Nav/index\";\nimport Record from \"../../components/Record/index\";\n\n\nfunction History(props) {\n    // sets history page \n  return <div>\n      <Nav />\n      <Record />\n      </div>\n\n}\n\nexport default History;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Search from \"./pages/Search/index\";\nimport History from \"./pages/History/index\";\n\nimport './App.css';\n\nfunction App() {\n  // sets routing for pages \n  return (\n    <Router>\n      <div>\n        <Switch>\n\n        <Route  exact path={[\"/\", \"/search\"]}>\n            <Search />\n          </Route>\n\n        <Route path={[\"/history\"]}>\n            <History />\n          </Route>\n\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}